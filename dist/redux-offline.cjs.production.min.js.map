{"version":3,"file":"redux-offline.cjs.production.min.js","sources":["../src/actions.ts","../src/reducer.ts","../src/index.ts","../src/middleware.ts"],"sourcesContent":["export const PERSIST_REHYDRATE = 'persist/REHYDRATE';\nexport const OFFLINE_SERIALIZE = 'Offline/OFFLINE_SERIALIZE';\nexport const OFFLINE_STATUS_CHANGED = 'Offline/OFFLINE_STATUS_CHANGED';\nexport const OFFLINE_BUSY = 'Offline/OFFLINE_BUSY';\nexport const OFFLINE_SCHEDULE_RETRY = 'Offline/OFFLINE_SCHEDULE_RETRY';\nexport const OFFLINE_RESET_STATE = 'Offline/OFFLINE_RESET_STATE';\n","import { OFFLINE_SERIALIZE } from './actions';\n\nconst initialState = { outbox: [], busy: false, online: true };\n\nfunction offlineReducer(state = initialState, action) {\n  if (action.type === OFFLINE_SERIALIZE) {\n    const { status, retryScheduled, ...newState } = action.payload;\n    const online = status !== 'paused';\n    const busy = status === 'busy';\n    return {\n      ...state,\n      ...newState,\n      retryScheduled: Boolean(retryScheduled),\n      online,\n      busy\n    };\n  }\n  return state;\n}\n\nexport default offlineReducer;\n","import { offlineSideEffects as createOfflineSideEffects } from '@redux-offline/offline-side-effects';\nimport {\n  OFFLINE_STATUS_CHANGED,\n  OFFLINE_BUSY,\n  OFFLINE_SCHEDULE_RETRY,\n  OFFLINE_SERIALIZE\n} from './actions';\nimport offlineReducer from './reducer';\nimport createReduxOfflineMiddleware from './middleware';\n\nexport const createOffline = (options, buildListeners = () => ({})) => {\n  let offlineSideEffects = null;\n\n  const enhanceStore = createStore => (reducer, preloadedState, enhancer) => {\n    const store = createStore(reducer, preloadedState, enhancer);\n    let prevStatus = null;\n\n    const listeners = {\n      onCommit: (payload, commit) => store.dispatch({ ...commit, payload }),\n      onRollback: (payload, rollback) =>\n        store.dispatch({ ...rollback, payload }),\n      onStatusChange: status => {\n        if (status === 'paused') {\n          store.dispatch({ type: OFFLINE_STATUS_CHANGED, payload: false });\n        } else {\n          if (prevStatus === 'paused') {\n            store.dispatch({ type: OFFLINE_STATUS_CHANGED, payload: true });\n          }\n          store.dispatch({ type: OFFLINE_BUSY, payload: status === 'busy' });\n        }\n        prevStatus = status;\n      },\n      onSerialize: state => {\n        store.dispatch({ type: OFFLINE_SERIALIZE, payload: state });\n      },\n      onRetry: delay =>\n        store.dispatch({ type: OFFLINE_SCHEDULE_RETRY, payload: { delay } }),\n      // @ts-ignore\n      ...buildListeners(store)\n    };\n\n    offlineSideEffects = createOfflineSideEffects(listeners, options);\n\n    // launch network detector\n    if (options.detectNetwork) {\n      options.detectNetwork(online => offlineSideEffects.setPaused(!online));\n    }\n\n    return store;\n  };\n\n  const reduxOfflineMiddleware = createReduxOfflineMiddleware(\n    offlineSideEffects\n  );\n\n  return {\n    enhanceStore,\n    reducer: offlineReducer,\n    middleware: reduxOfflineMiddleware\n  };\n};\n","import { PERSIST_REHYDRATE, OFFLINE_RESET_STATE } from './actions';\n\nfunction createReduxOfflineMiddleware(offlineSideEffects) {\n  const reduxOfflineMiddleware = () => next => action => {\n    next(action);\n\n    if (action.type === PERSIST_REHYDRATE) {\n      offlineSideEffects.rehydrateState(action.payload?.offline ?? {});\n    }\n\n    if (action.type === OFFLINE_RESET_STATE) {\n      offlineSideEffects.reset();\n    }\n\n    offlineSideEffects.addSideEffect(action);\n  };\n\n  return reduxOfflineMiddleware;\n}\n\nexport default createReduxOfflineMiddleware;\n"],"names":["initialState","outbox","busy","online","offlineReducer","state","action","type","payload","status","retryScheduled","Boolean","options","buildListeners","offlineSideEffects","enhanceStore","createStore","reducer","preloadedState","enhancer","store","prevStatus","listeners","onCommit","commit","dispatch","onRollback","rollback","onStatusChange","onSerialize","onRetry","delay","createOfflineSideEffects","detectNetwork","setPaused","middleware","next","rehydrateState","_action$payload","offline","reset","addSideEffect","createReduxOfflineMiddleware"],"mappings":"wUAAO,ICEDA,EAAe,CAAEC,OAAQ,GAAIC,MAAM,EAAOC,QAAQ,GAExD,SAASC,EAAeC,EAAsBC,eAAtBD,IAAAA,EAAQL,GDHC,8BCI3BM,EAAOC,KAA4B,OACWD,EAAOE,QAA/CC,IAAAA,OAAQC,IAAAA,eACVP,EAAoB,WAAXM,EACTP,EAAkB,SAAXO,cAERJ,qKAEHK,eAAgBC,QAAQD,GACxBP,OAAAA,EACAD,KAAAA,WAGGG,wBCPoB,SAACO,EAASC,YAAAA,IAAAA,EAAiB,iBAAO,SACzDC,EAAqB,WA4ClB,CACLC,aA3CmB,SAAAC,UAAe,SAACC,EAASC,EAAgBC,OACtDC,EAAQJ,EAAYC,EAASC,EAAgBC,GAC/CE,EAAa,KAEXC,KACJC,SAAU,SAACf,EAASgB,UAAWJ,EAAMK,cAAcD,GAAQhB,QAAAA,MAC3DkB,WAAY,SAAClB,EAASmB,UACpBP,EAAMK,cAAcE,GAAUnB,QAAAA,MAChCoB,eAAgB,SAAAnB,GACC,WAAXA,EACFW,EAAMK,SAAS,CAAElB,KFrBW,iCEqBmBC,SAAS,KAErC,WAAfa,GACFD,EAAMK,SAAS,CAAElB,KFxBS,iCEwBqBC,SAAS,IAE1DY,EAAMK,SAAS,CAAElB,KFzBC,uBEyBmBC,QAAoB,SAAXC,KAEhDY,EAAaZ,GAEfoB,YAAa,SAAAxB,GACXe,EAAMK,SAAS,CAAElB,KFhCQ,4BEgCiBC,QAASH,KAErDyB,QAAS,SAAAC,UACPX,EAAMK,SAAS,CAAElB,KFhCa,iCEgCiBC,QAAS,CAAEuB,MAAAA,OAEzDlB,EAAeO,WAGpBN,EAAqBkB,qBAAyBV,EAAWV,GAGrDA,EAAQqB,eACVrB,EAAQqB,eAAc,SAAA9B,UAAUW,EAAmBoB,WAAW/B,MAGzDiB,IASPH,QAASb,EACT+B,WCxDJ,SAAsCrB,UACL,kBAAM,SAAAsB,UAAQ,SAAA9B,WAC3C8B,EAAK9B,GHJwB,sBGMzBA,EAAOC,MACTO,EAAmBuB,iCAAe/B,EAAOE,gBAAP8B,EAAgBC,WAAW,IHFhC,gCGK3BjC,EAAOC,MACTO,EAAmB0B,QAGrB1B,EAAmB2B,cAAcnC,MDqCJoC,CAC7B5B"}